# -*- coding: utf-8 -*-
"""HW14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HfolwkrqYkMgYvmZOSOUda61G0H24leY
"""

# 1.
import csv

t = [] # column 0
data1 = [] # column 1

with open('sigA.csv') as f:
    # open the csv file
    reader = csv.reader(f)
    for row in reader:
        # read the rows 1 one by one
        t.append(float(row[0])) # leftmost column
        data1.append(float(row[1])) # second column

#for i in range(len(t)):
    # print the data to verify it was read
    #print(str(t[i]) + ", " + str(data1[i]))

# 2.
import matplotlib.pyplot as plt # for plotting
import numpy as np

# plt.plot(t,data1,'b-*')
# plt.xlabel('Time(s)')
# plt.ylabel('Signal')
# plt.title('Signal vs Time')
# plt.show()

# 3.
data_points = len(data1)
total_time = t[-1]
sample_rate = data_points/total_time
print(sample_rate)

# 4.

def python_fft(data, t, title):
  sample_rate = len(data)/t[-1]

  Fs = sample_rate
  Ts = 1.0/Fs; # sampling interval
  ts = np.arange(0,t[-1],Ts) # time vector
  y = data # the data to make the fft from
  n = len(y) # length of the signal
  k = np.arange(n)
  T = n/Fs
  frq = k/T # two sides frequency range
  frq = frq[range(int(n/2))] # one side frequency range
  Y = np.fft.fft(y)/n # fft computing and normalization
  Y = Y[range(int(n/2))]

  fig, (ax1, ax2) = plt.subplots(2, 1)
  ax1.plot(t,y,'r')
  ax1.set_xlabel('Time')
  ax1.set_ylabel('Amplitude')
  ax2.loglog(frq,abs(Y),'b') # plotting the fft
  ax2.set_xlabel('Freq (Hz)')
  ax2.set_ylabel('|Y(freq)|')
  plt.show()

import csv
t_a = [] # column 0
data_a = [] # column 1

t_b = [] # column 0
data_b = [] # column 1

t_c = [] # column 0
data_c = [] # column 1

t_d = [] # column 0
data_d = [] # column 1

files = ['sigA.csv', 'sigB.csv', 'sigC.csv', 'sigD.csv']
datas = [data_a, data_b, data_c, data_d]
times = [t_a, t_b, t_c, t_d]
titles = ['Sig A', 'Sig B', 'Sig C', 'Sig D']

for ii in range(4):
  with open(files[ii]) as f:
    # open the csv file
    reader = csv.reader(f)
    for row in reader:
        # read the rows 1 one by one
        times[ii].append(float(row[0])) # leftmost column
        datas[ii].append(float(row[1])) # second column

# for jj in range(4):
#   python_fft(datas[jj], times[jj], titles[jj])

# 5.
def python_fft_maf(data, data_filtered, t, title):
  sample_rate = len(data)/t[-1]

  Fs = sample_rate
  Ts = 1.0/Fs; # sampling interval
  ts = np.arange(0,t[-1],Ts) # time vector
  y = data # the data to make the fft from
  n = len(y) # length of the signal
  k = np.arange(n)
  T = n/Fs
  frq = k/T # two sides frequency range
  frq = frq[range(int(n/2))] # one side frequency range
  Y = np.fft.fft(y)/n # fft computing and normalization
  Y = Y[range(int(n/2))]

  Fs_filt = sample_rate
  Ts_filt = 1.0/Fs_filt; # sampling interval
  ts_filt = np.arange(0,t[-1],Ts_filt) # time vector
  y_filt = data_filtered # the data to make the fft from
  n_filt = len(y_filt) # length of the signal
  k_filt = np.arange(n_filt)
  T_filt = n_filt/Fs_filt
  frq_filt = k_filt/T_filt # two sides frequency range
  frq_filt = frq_filt[range(int(n_filt/2))] # one side frequency range
  Y_filt = np.fft.fft(y_filt)/n_filt # fft computing and normalization
  Y_filt = Y_filt[range(int(n_filt/2))]

  fig, (ax1, ax2) = plt.subplots(2, 1)
  ax1.plot(t,y,'k', label = 'y')
  ax1.plot(t, y_filt, 'r', label = 'y_filt')
  ax1.set_xlabel('Time')
  ax1.set_ylabel('Amplitude')
  ax1.set_title(title)
  ax2.loglog(frq,abs(Y),'k') # plotting the fft
  ax2.loglog(frq_filt, abs(Y_filt), 'r')
  ax2.set_xlabel('Freq (Hz)')
  ax2.set_ylabel('|Y(freq)|')
  plt.rcParams['figure.figsize'] = (20, 10)
  plt.show()

# value of X
# X = 10
X = 50

a_filt = []
b_filt = []
c_filt = []
d_filt = []
datas_filt = [a_filt, b_filt, c_filt, d_filt]
#titles_maf = ["Sig A (X=10)", "Sig B (X=10)", "Sig C (X=10)", "Sig D(X=10)"]
titles_maf = ["Sig A (X=50)", "Sig B (X=50)", "Sig C (X=50)", "Sig D(X=50)"]

for ii in range(4):
  temp = datas[ii][0:X]
  kk = 0
  for jj in range(X):
    datas_filt[ii].append(0)
  for ll in range(X, len(datas[ii])):
    datas_filt[ii].append(sum(temp[kk:X+kk])/X)
    temp.append(datas[ii][ll])
    kk=kk+1

# for hh in range(4):
#   python_fft_maf(datas[hh], datas_filt[hh], times[hh], titles_maf[hh])

# 6.
def python_fft_iir(data, data_filtered, t, title):
  sample_rate = len(data)/t[-1]

  Fs = sample_rate
  Ts = 1.0/Fs; # sampling interval
  ts = np.arange(0,t[-1],Ts) # time vector
  y = data # the data to make the fft from
  n = len(y) # length of the signal
  k = np.arange(n)
  T = n/Fs
  frq = k/T # two sides frequency range
  frq = frq[range(int(n/2))] # one side frequency range
  Y = np.fft.fft(y)/n # fft computing and normalization
  Y = Y[range(int(n/2))]

  Fs_filt = sample_rate
  Ts_filt = 1.0/Fs_filt; # sampling interval
  ts_filt = np.arange(0,t[-1],Ts_filt) # time vector
  y_filt = data_filtered # the data to make the fft from
  n_filt = len(y_filt) # length of the signal
  k_filt = np.arange(n_filt)
  T_filt = n_filt/Fs_filt
  frq_filt = k_filt/T_filt # two sides frequency range
  frq_filt = frq_filt[range(int(n_filt/2))] # one side frequency range
  Y_filt = np.fft.fft(y_filt)/n_filt # fft computing and normalization
  Y_filt = Y_filt[range(int(n_filt/2))]

  fig, (ax1, ax2) = plt.subplots(2, 1)
  ax1.plot(t,y,'k', label = 'y')
  ax1.plot(t, y_filt, 'r', label = 'y_filt')
  ax1.set_xlabel('Time')
  ax1.set_ylabel('Amplitude')
  ax1.set_title(title)
  ax2.loglog(frq,abs(Y),'k') # plotting the fft
  ax2.loglog(frq_filt, abs(Y_filt), 'r')
  ax2.set_xlabel('Freq (Hz)')
  ax2.set_ylabel('|Y(freq)|')
  plt.rcParams['figure.figsize'] = (20, 10)
  plt.show()

# value of A and B
A = 0.9
B = 0.1

a_filt = []
b_filt = []
c_filt = []
d_filt = []
datas_filt = [a_filt, b_filt, c_filt, d_filt]
titles_iir = ["Sig A (A=0.9, B=0.1)", "Sig B (A=0.9, B=0.1)", "Sig C (A=0.9, B=0.1)", "Sig D (A=0.9, B=0.1)"]


for ii in range(4):
  new_average = 0
  for kk in range(len(datas[ii])):
    new_average = A*new_average + B*datas[ii][kk]
    datas_filt[ii].append(new_average)

# for jj in range(4):
#   python_fft_iir(datas[jj], datas_filt[jj], times[jj], titles_iir[jj])

# 7.
def python_fft_fir(data, data_filtered, t, title):
  sample_rate = len(data)/t[-1]

  Fs = sample_rate
  Ts = 1.0/Fs; # sampling interval
  ts = np.arange(0,t[-1],Ts) # time vector
  y = data # the data to make the fft from
  n = len(y) # length of the signal
  k = np.arange(n)
  T = n/Fs
  frq = k/T # two sides frequency range
  frq = frq[range(int(n/2))] # one side frequency range
  Y = np.fft.fft(y)/n # fft computing and normalization
  Y = Y[range(int(n/2))]

  Fs_filt = sample_rate
  Ts_filt = 1.0/Fs_filt; # sampling interval
  ts_filt = np.arange(0,t[-1],Ts_filt) # time vector
  y_filt = data_filtered # the data to make the fft from
  n_filt = len(y_filt) # length of the signal
  k_filt = np.arange(n_filt)
  T_filt = n_filt/Fs_filt
  frq_filt = k_filt/T_filt # two sides frequency range
  frq_filt = frq_filt[range(int(n_filt/2))] # one side frequency range
  Y_filt = np.fft.fft(y_filt)/n_filt # fft computing and normalization
  Y_filt = Y_filt[range(int(n_filt/2))]

  fig, (ax1, ax2) = plt.subplots(2, 1)
  ax1.plot(t,y,'k', label = 'y')
  ax1.plot(t, y_filt, 'r', label = 'y_filt')
  ax1.set_xlabel('Time')
  ax1.set_ylabel('Amplitude')
  ax1.set_title(title)
  ax2.loglog(frq,abs(Y),'k') # plotting the fft
  ax2.loglog(frq_filt, abs(Y_filt), 'r')
  ax2.set_xlabel('Freq (Hz)')
  ax2.set_ylabel('|Y(freq)|')
  plt.rcParams['figure.figsize'] = (20, 10)
  plt.show()

coef = [0.001066399611256316,
0.002126085729052212,
0.003159337947181336,
0.003059846159226131,
-0.000000000000000002,
-0.007058660053369676,
-0.016518593158766935,
-0.023293856024132309,
-0.019979518396641336,
0.000000000000000006,
0.038574587622709627,
0.090551232797380518,
0.144100964485838173,
0.184467614361288862,
0.199489117837954200,
0.184467614361288862,
0.144100964485838173,
0.090551232797380532,
0.038574587622709634,
0.000000000000000006,
-0.019979518396641339,
-0.023293856024132316,
-0.016518593158766956,
-0.007058660053369679,
-0.000000000000000002,
0.003059846159226132,
0.003159337947181333,
0.002126085729052213,
0.001066399611256316]

a_filt = []
b_filt = []
c_filt = []
d_filt = []
datas_filt = [a_filt, b_filt, c_filt, d_filt]
titles_fir = ["Sig A (Coeff=29, Hammings, Cutoff=10Hz, Bandwidth=11Hz)", "Sig B (Coeff=29, Hammings, Cutoff=10Hz, Bandwidth=11Hz)", "Sig C (Coeff=29, Hammings, Cutoff=10Hz, Bandwidth=11Hz)", "Sig D(Coeff=29, Hammings, Cutoff=10Hz, Bandwidth=11Hz)"]


for ii in range(4):
  temp = datas[ii][0:len(coef)]
  kk = 0
  for jj in range(len(coef)):
    datas_filt[ii].append(0)
  for ll in range(len(coef), len(datas[ii])):
    weighted = 0
    for mm in range(len(coef)):
      weighted = weighted + coef[mm]*temp[mm+kk]
    datas_filt[ii].append(weighted)
    temp.append(datas[ii][ll])
    kk=kk+1

for nn in range(4):
  python_fft_fir(datas[nn], datas_filt[nn], times[nn], titles_fir[nn])